name: ci

on:
  push:
    branches:
      - main
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Check rust-cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
            ~/.rustup/
          key: rust-nightly-2024-01-25-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: rust-nightly-2024-01-25-

      - name: Install Rust nightly toolchain
        id: rustc-toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly-2024-01-25
          override: true

      - name: Check sp1 installation
        continue-on-error: true
        run: |
          cargo prove --version
          rustup toolchain list | grep -q succinct

      - name: Maybe install cargo prove and sp1 toolchain
        if: failure()
        run: |
          git clone --depth 1 https://github.com/succinctlabs/sp1.git
          cd sp1/cli
          cargo install --locked --force --path .
          cd ../..
          cargo prove install-toolchain

      - name: Build program and server
        run: |
          cd ./program
          cargo prove build
          cd ..
          cargo build --manifest-path ./server/Cargo.toml --release

      - name: Server testing
        run: |
          ./server/target/release/sp1-safe-server &
          ./server/test.sh

  check-changelog:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: test
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4

      - name: Get the version tag
        run: echo "PUSHED_TAG=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV

      - name: Check the release notes
        run: |
          node -e "
            const lines = require('fs').readFileSync('./CHANGELOG.md', 'utf8').split(/(\n)/g).filter(Boolean);
            let head = lines.findIndex(l => /^\s*##[^v]+${{ env.PUSHED_TAG }}/.test(l));
            if (head === -1) { throw Error('${{ env.PUSHED_TAG }} not in changelog') } else head = head + 1;
            let tail = lines.slice(head).findIndex(l => /^\s*##[^v]+v/.test(l));
            tail = tail === -1 ? lines.length : tail + head;
            let notes = lines.slice(head, tail).join('');
            if (!notes.trim()) throw Error('missing release notes for ${{ env.PUSHED_TAG }}')
            console.log(notes);
          "

  prerelease:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: check-changelog
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4

      - name: Get the current version tag
        run: echo "PUSHED_TAG=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV

      - name: Get the release notes
        run: |
          node -e "
            const lines = require('fs').readFileSync('./CHANGELOG.md', 'utf8').split(/(\n)/g).filter(Boolean);
            let head = lines.findIndex(l => /^\s*##[^v]+${{ env.PUSHED_TAG }}/.test(l));
            if (head === -1) { throw Error('${{ env.PUSHED_TAG }} not in changelog') } else head = head + 1;
            let tail = lines.slice(head).findIndex(l => /^\s*##[^v]+v/.test(l));
            tail = tail === -1 ? lines.length : tail + head;
            console.log(lines.slice(head, tail).join(''));
          " \
          > ./release_notes.md

      - name: Create a GitHub release
        id: create_release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.PUSHED_TAG }}
          release_name: ${{ env.PUSHED_TAG }}
          body_path: ./release_notes.md
          draft: false
          prerelease: true

      - name: Prep a release upload url artifact
        run: echo "${{ steps.create_release.outputs.upload_url }}" > ./release_upload_url.txt

      - name: Upload the release upload url artifact
        uses: actions/upload-artifact@v2.2.2
        with:
          name: release_upload_url
          path: ./release_upload_url.txt

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: prerelease
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-22.04
          - macos-13
    steps:
      - uses: actions/checkout@v4

      - name: Check rust-cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
            ~/.rustup/
          key: rust-nightly-2024-01-25-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: rust-nightly-2024-01-25-

      - name: Install Rust nightly toolchain
        id: rustc-toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly-2024-01-25
          override: true

      - name: Download the release upload url artifact
        uses: actions/download-artifact@v2.0.8
        with:
          name: release_upload_url

      - name: Set the release upload url as an env var
        run: echo "RELEASE_UPLOAD_URL=$(<./release_upload_url.txt)" >> $GITHUB_ENV

      - name: Get the version tag
        run: echo "PUSHED_TAG=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV

      - name: Check sp1 installation
        continue-on-error: true
        run: |
          cargo prove --version
          rustup toolchain list | grep -q succinct

      - name: Maybe install cargo prove and sp1 toolchain
        if: failure()
        run: |
          git clone --depth 1 https://github.com/succinctlabs/sp1.git
          cd sp1/cli
          cargo install --locked --force --path .
          cd ../..
          cargo prove install-toolchain

      - name: Build the program and server
        run: |
          cd ./program
          cargo prove build
          cd ..
          cargo build --manifest-path ./server/Cargo.toml --release

      - name: Gzip the binary
        run: gzip -c ./server/target/release/sp1-safe-server > ./sp1-safe-server.gz

      - name: Publish the linux server binary
        if: ${{ matrix.os == 'ubuntu-22.04' }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.RELEASE_UPLOAD_URL }}
          asset_path: ./sp1-safe-server.gz
          asset_name: sp1-safe-server-${{ env.PUSHED_TAG }}-x86_64-unknown-linux-gnu.gz
          asset_content_type: application/gzip

      - name: Publish the darwin server binary
        if: ${{ matrix.os == 'macos-13' }}
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.RELEASE_UPLOAD_URL }}
          asset_path: ./sp1-safe-server.gz
          asset_name: sp1-safe-server-${{ env.PUSHED_TAG }}-x86_64-apple-darwin.gz
          asset_content_type: application/gzip
